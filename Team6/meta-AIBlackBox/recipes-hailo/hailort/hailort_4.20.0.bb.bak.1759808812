SUMMARY = "HailoRT (library + hailortcli)"
HOMEPAGE = "https://github.com/hailo-ai/hailort"
LICENSE = "MIT"

PV = "4.20.0"
SRC_URI = "\
    git://github.com/hailo-ai/hailort.git;protocol=https;nobranch=1 \
    file://LICENSE.MIT \
"
# v4.20.0 태그 커밋
SRCREV = "542ba8f3cd95ed85175083ee4add00167c50f668"

# files/에 둔 MIT 라이선스 파일을 검증 (WORKDIR 위치 기준)
LIC_FILES_CHKSUM = "file://${WORKDIR}/LICENSE.MIT;md5=0835ade698e0bcf8506ecda2f7b4f302"

S = "${WORKDIR}/git"
B = "${WORKDIR}/build"

inherit cmake pkgconfig

# host protoc를 제공하기 위해 protobuf-native 의존 추가
DEPENDS = "protobuf-native protobuf zlib"

# Ninja 말고 Make 쓰고(선택), Protobuf 경로/도구를 확실히 지정
OECMAKE_GENERATOR = "Unix Makefiles"

EXTRA_OECMAKE = "\
  -DCMAKE_BUILD_TYPE=Release \
  -DHAILO_BUILD_EXAMPLES=OFF \
  -DHAILO_BUILD_EMULATOR=OFF \
  -DHAILO_BUILD_GSTREAMER=OFF \
  -DHAILO_BUILD_TESTS=OFF \
  -DHAILO_BUILD_PYHAILORT=OFF \
  -DProtobuf_DIR=${STAGING_LIBDIR}/cmake/protobuf \
  -DProtobuf_INCLUDE_DIR=${STAGING_INCDIR} \
  -DProtobuf_LIBRARY=${STAGING_LIBDIR}/libprotobuf.so \
  -DProtobuf_PROTOC_EXECUTABLE=${STAGING_BINDIR_NATIVE}/protoc \
  -DFETCHCONTENT_FULLY_DISCONNECTED=ON \
"

# 패키지 분할
PACKAGES = "${PN} ${PN}-cli ${PN}-dev ${PN}-dbg"
FILES:${PN}      = "${libdir}/libhailort.so.*"
FILES:${PN}-cli  = "${bindir}/hailortcli"
FILES:${PN}-dev  = "${includedir}/hailo/* ${libdir}/libhailort.so ${libdir}/pkgconfig/* ${libdir}/cmake/HailoRT*"
RDEPENDS:${PN}-cli = "${PN}"do_configure[network] = "1"
do_configure[network] = "1"
do_compile[network]   = "1"
DEPENDS += "git-native"
OECMAKE_GENERATOR = "Unix Makefiles"

# Upstream의 내부 execute_cmake가 -G/툴체인을 안 넘길 수 있어 주입해서 고정
do_configure:prepend() {
    install -d ${S}/hailort/cmake
function(execute_cmake SRC_DIR BUILD_DIR)
    set(_GEN_ARGS -G "${CMAKE_GENERATOR}")
    set(_TC_ARGS "")
    if(DEFINED CMAKE_TOOLCHAIN_FILE)
        list(APPEND _TC_ARGS -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE})
    endif()
    execute_process(COMMAND ${CMAKE_COMMAND} ${SRC_DIR} -B ${BUILD_DIR}
                    ${_GEN_ARGS}
                    ${_TC_ARGS}
                    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
                    RESULT_VARIABLE _res)
    if(NOT _res EQUAL 0)
        message(FATAL_ERROR "Failed configuring ${SRC_DIR}")
    endif()
endfunction()

}


do_configure[network] = "1"
do_compile[network]   = "1"
DEPENDS += "git-native"
OECMAKE_GENERATOR = "Unix Makefiles"

# Upstream의 내부 execute_cmake가 -G/툴체인을 안 넘길 수 있어 주입해서 고정
do_configure:prepend() {
    install -d ${S}/hailort/cmake
    cat > ${S}/hailort/cmake/execute_cmake.cmake <<'EOC'
function(execute_cmake SRC_DIR BUILD_DIR)
    set(_GEN_ARGS -G "${CMAKE_GENERATOR}")
    set(_TC_ARGS "")
    if(DEFINED CMAKE_TOOLCHAIN_FILE)
        list(APPEND _TC_ARGS -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE})
    endif()
    execute_process(COMMAND ${CMAKE_COMMAND} ${SRC_DIR} -B ${BUILD_DIR}
                    ${_GEN_ARGS}
                    ${_TC_ARGS}
                    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
                    RESULT_VARIABLE _res)
    if(NOT _res EQUAL 0)
        message(FATAL_ERROR "Failed configuring ${SRC_DIR}")
    endif()
endfunction()
EOC
}
