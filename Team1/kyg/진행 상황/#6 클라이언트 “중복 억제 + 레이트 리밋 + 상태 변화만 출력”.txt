좋아, ROS2는 나중으로 미루고 지금 바로 할 수 있는 것들부터 진행하자.
(모두 ROS2 없이 동작)

A) 클라이언트 “중복 억제 + 레이트 리밋 + 상태 변화만 출력”

같은 알림이 반복 수신될 때 콘솔이 도배되지 않도록 하고, 내용이 바뀌었을 때만 눈에 띄게 찍도록 패치해요.

1) client.py 패치

아래 블록을 수신 루프에서 JSON 파싱 후(즉, hdr = obj.get("hdr", {}) 다음) 추가하세요.

# ==== 중복 억제 & 상태 변화 감지 ====
import time as _time

# 전역/상단에 선언(파일 맨 위 근처)
# SEEN: 최근 src#seq 캐시 / LAST_PRINT: 마지막으로 출력한 요약 / PRINT_GAP_S: 최소 출력 간격
try:
    SEEN
except NameError:
    SEEN = {}
    MAX_KEEP = 300
    LAST_PRINT = {"summary": None, "ts": 0.0}
    PRINT_GAP_S = 5.0  # 같은 내용은 최소 5초 간격으로만 출력

key = f"{hdr.get('src')}#{hdr.get('seq')}"
if key in SEEN:
    continue
SEEN[key] = _time.time()
if len(SEEN) > MAX_KEEP:
    for k,_ in sorted(SEEN.items(), key=lambda x: x[1])[:len(SEEN)-MAX_KEEP]:
        SEEN.pop(k, None)

# 상태 변화 요약 문자열 만들기
acc = obj.get("accident", {}); adv = obj.get("advice", {})
summary = f"{acc.get('type')}|{acc.get('severity')}|{int(float(acc.get('distance_m',0)))}|{adv.get('suggest')}"

now = _time.time()
if summary == LAST_PRINT["summary"] and (now - LAST_PRINT["ts"] < PRINT_GAP_S):
    # 동일 내용이 너무 자주 오면 생략
    continue

LAST_PRINT["summary"] = summary
LAST_PRINT["ts"] = now
# ==== 여기까지 패치 ====


적용 후 서비스 재시작:

sudo systemctl restart v2x-alert-client.service


효과:

같은 src#seq는 1회만 처리 (중복 억제)

내용(타입/심각도/거리/권고)이 동일하면 최소 5초 간격으로만 출력 → 콘솔 도배 방지

B) 링크 상태 확인(Heartbeat) — 서버/클라 둘 다 ROS2 불필요
1) 서버: 10초마다 하트비트 송신(새 파일)
sudo tee /opt/v2x/heartbeat_tx.py >/dev/null <<'EOF'
#!/usr/bin/env python3
import socket, json, time, os
MCAST = os.environ.get("MCAST","239.20.20.20")
PORT  = int(os.environ.get("PORT","5520"))
SRC   = os.environ.get("SRC_ID","rsu_heartbeat")

sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM,socket.IPPROTO_UDP)
sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 1)

seq=0
while True:
    seq+=1
    msg={"hdr":{"ver":1,"src":SRC,"seq":seq,"ts":time.time()},
         "accident":{"type":"heartbeat","severity":"low","distance_m":0,"road":"","lat":0,"lon":0},
         "advice":{"message":"","suggest":"caution"},"ttl_s":5}
    sock.sendto(json.dumps(msg, separators=(',',':')).encode(), (MCAST, PORT))
    time.sleep(10)
EOF
sudo chmod +x /opt/v2x/heartbeat_tx.py

(선택) systemd로 자동 실행
sudo tee /etc/systemd/system/v2x-heartbeat.service >/dev/null <<'EOF'
[Unit]
Description=V2X Heartbeat Broadcaster
After=network-online.target
Wants=network-online.target

[Service]
WorkingDirectory=/opt/v2x
Environment=MCAST=239.20.20.20
Environment=PORT=5520
Environment=SRC_ID=rsu_heartbeat
ExecStart=/opt/v2x/heartbeat_tx.py
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reload
sudo systemctl enable --now v2x-heartbeat.service
journalctl -u v2x-heartbeat.service -f

2) 클라이언트: N초 미수신 시 경고(패치)

client.py 수신 루프 바깥(초기화 직후)에 “감시 스레드”를 하나 추가하세요.

# 파일 상단 import에 추가
import threading

# 전역 상태
LAST_RX_TS = time.time()

# 수신 루프에서 패킷 처리 성공 후, 맨 아래쯤에 추가:
LAST_RX_TS = time.time()

# 감시 스레드 함수(수신이 30초 이상 없으면 경고)
def _watch_link():
    while True:
        try:
            if time.time() - LAST_RX_TS > 30:
                print("[WARN] no V2X messages in last 30s (link down?)")
                # 임계 넘기면 알림 한번 찍고, 다음 경고까지 쿨다운
                time.sleep(10)
            time.sleep(1)
        except Exception:
            pass

# main에서 소켓 준비 직후에 스레드 시작:
threading.Thread(target=_watch_link, daemon=True).start()


적용 후 재시작:

sudo systemctl restart v2x-alert-client.service


효과:

하트비트가 10초마다 오므로, 네트워크 문제로 30초 이상 미수신이면 즉시 경고 출력

C) “누르면 바로 테스트” — 서버 측 이벤트/하트비트 단발 테스트

하트비트만 확인:

python3 /opt/v2x/heartbeat_tx.py


사고 이벤트 1회 발사:

python3 /opt/v2x/emit_event.py --type collision --severity high --distance-m 450 --clip-hint


차량 콘솔 기대:

하트비트만으로도 [RECV] ... type=heartbeat ... 주기 출력

이벤트 발사 시, 새 요약 내용이 달라졌으므로 즉시 출력(레이트 리밋 통과)

D) 다음 단계 제안(ROS2 없이도 가능)

DB 인덱스(SQLite): 이벤트/클립 경로 기록 → 나중에 CLI로 조회 가능

알림 포맷 보강: accident.id(UUID), source_cam, clip_url 추가

보안 강화: HMAC 키를 .env로 분리하고, 키 롤테이션 스크립트 준비

원하면 이 중 하나를 바로 이어서 세팅해줄게. (개인적으론 DB 인덱스부터 추천)
