좋아! #4와 4-4까지 끝났으니, 바로 차량 반응 → 운용/신뢰성 강화 → 모델 교체 순서로 가자.
아래는 “당장 실행 가능한” 다음 액션들이다. (명령어 그대로 쓰면 됨)

1) 차량 반응(ROS2) 연결
1-1. 클라에서 ROS2 퍼블리시 켜기

차량의 client.env에서 ROS2=1 추가 후 재시작:

echo 'ROS2=1' | sudo tee -a /opt/v2x/client.env
sudo systemctl restart v2x-alert-client.service


→ 이제 수신 메시지가 /v2x/alert (std_msgs/String)로 퍼블리시됨.

1-2. 간이 정책 노드(감속/정지) 실행
sudo tee /opt/v2x/alert_policy.py >/dev/null <<'EOF'
#!/usr/bin/env python3
import json, rclpy
from rclpy.node import Node
from std_msgs.msg import String
from geometry_msgs.msg import Twist

class Policy(Node):
    def __init__(self):
        super().__init__('v2x_policy')
        self.sub = self.create_subscription(String, '/v2x/alert', self.cb, 10)
        self.pub = self.create_publisher(Twist, '/cmd_vel', 10)

    def cb(self, msg: String):
        try:
            a = json.loads(msg.data)
            acc = a.get('accident', {})
            d = float(acc.get('distance_m', 1e9))
            typ = acc.get('type', 'unknown')
            cmd = Twist()
            # 데모 정책
            if typ in ('collision','fire') and d <= 500:
                cmd.linear.x = 0.2   # 감속
            if typ in ('blockage',) and d <= 200:
                cmd.linear.x = 0.0   # 정지
            self.pub.publish(cmd)
        except Exception as e:
            self.get_logger().warn(f'bad alert: {e}')

def main():
    rclpy.init(); rclpy.spin(Policy())
EOF


실행(ROS2 환경 소스 후):

source /opt/ros/humble/setup.bash   # 설치 경로에 맞게
python3 /opt/v2x/alert_policy.py


(원하면 systemd 서비스로 자동화도 만들어 줄 수 있어.)

2) 수신 중복 억제(선택·권장)

같은 알림을 반복 방송하므로, 같은 src+seq는 무시하도록 클라이언트에 캐시 추가.

/opt/v2x/client.py(네 파일명)에 아래 라인들만 추가:

# 파일 상단 근처에 추가
SEEN = {}
MAX_KEEP = 200  # 최근 200개만 유지

# recv 루프 안, JSON 파싱 후 hdr 얻은 다음에 추가
key = f"{hdr.get('src')}#{hdr.get('seq')}"
if key in SEEN:
    continue
SEEN[key] = time.time()
if len(SEEN) > MAX_KEEP:
    # 오래된 것 제거
    for k,_ in sorted(SEEN.items(), key=lambda x: x[1])[:len(SEEN)-MAX_KEEP]:
        SEEN.pop(k, None)


적용:

sudo systemctl restart v2x-alert-client.service

3) 이벤트/클립 인덱스(DB) 남기기(서버)

나중에 검색·리플레이를 쉽게 하려면 SQLite 기록 추천.

인덱서 스크립트:

sudo tee /opt/v2x/index_clip.py >/dev/null <<'EOF'
#!/usr/bin/env python3
import sqlite3, json, sys, os
db = "/opt/v2x/v2x_index.sqlite3"
conn = sqlite3.connect(db); c = conn.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS events(
 id INTEGER PRIMARY KEY, ts REAL, type TEXT, severity TEXT,
 lat REAL, lon REAL, road TEXT, distance_m REAL, clip TEXT)""")
evt = json.loads(sys.stdin.read())
c.execute("INSERT INTO events(ts,type,severity,lat,lon,road,distance_m,clip) VALUES(?,?,?,?,?,?,?,?)",
 (evt.get("ts"),evt.get("type"),evt.get("severity"),evt.get("lat"),evt.get("lon"),
  evt.get("road"),evt.get("distance_m"),evt.get("clip","")))
conn.commit(); conn.close()
EOF
sudo chmod +x /opt/v2x/index_clip.py


watch_and_broadcast.py에서 클립 생성 직후에 아래 3줄 추가:

evt["clip"] = f"/var/archive/accident_{int(ts)}.mp4"
p = subprocess.Popen(["/usr/bin/python3","/opt/v2x/index_clip.py"], stdin=subprocess.PIPE)
p.communicate(json.dumps(evt).encode())


재시작:

sudo systemctl restart v2x-watcher.service

4) 헬스비트(상태 확인) 추가(선택)

서버가 10초마다 상태를 멀티캐스트 → 차량이 “최근 수신 시간” 추적.

4-1. 서버: heartbeat 송신
sudo tee /opt/v2x/heartbeat_tx.py >/dev/null <<'EOF'
#!/usr/bin/env python3
import socket, json, time
MCAST="239.20.20.20"; PORT=5520
sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM,socket.IPPROTO_UDP)
sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 1)
seq=0
while True:
    seq+=1
    msg={"hdr":{"ver":1,"src":"rsu_heartbeat","seq":seq,"ts":time.time()},
         "accident":{"type":"heartbeat","severity":"low","distance_m":0,"road":"","lat":0,"lon":0},
         "advice":{"message":"","suggest":"caution"},"ttl_s":5}
    sock.sendto(json.dumps(msg).encode(), (MCAST, PORT))
    time.sleep(10)
EOF
sudo chmod +x /opt/v2x/heartbeat_tx.py


(원하면 systemd 유닛도 만들어줄 수 있음.)

4-2. 차량: 마지막 수신 시각 표시(선택)

client.py에 마지막 수신시간 체크해서 N초 이상 미수신 시 경고 출력하도록 한 줄 추가해도 됨.

5) 감지기 교체(실제 모델)

스텁 대신 YOLOv8n(+간단 규칙) 또는 OpenCV DNN으로 바꾸기.
감지 확정 시엔 지금처럼 JSON 하나 드롭만 하면 연동 끝.
원하면 Ultralytics/ONNXRuntime 버전 중 원하는 쪽으로 스켈레톤 만들어 줄게.

6) 최종 E2E 테스트 체크리스트

서버에서 emit_event.py 실행 → 차량 [RECV] ... OK 즉시 표시

녹화가 켜져 있으면 /var/archive/accident_<ts>.mp4 생성

sqlite3 /opt/v2x/v2x_index.sqlite3 'select * from events order by id desc limit 3;' 로 인덱스 확인

차량에서 ROS2=1 + alert_policy.py 실행 상태에서 실제 감속/정지 토픽(/cmd_vel) 발행되는지 확인

다음으로 어떤 걸 먼저 붙일래?

(A) 정책 노드 systemd로 자동 실행

(B) YOLO 감지기 스켈레톤(이벤트 드롭 연동)

(C) 클라이언트에 “N초 미수신 경고” 추가 패치

원하는 항목 고르면, 바로 코드까지 깔끔하게 작성해 줄게!
