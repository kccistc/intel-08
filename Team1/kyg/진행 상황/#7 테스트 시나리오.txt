좋아—heartbeat + collision이 섞여 들어오는 시나리오를 단계별로 테스트하자. (ROS2 없이 진행)

준비 상태

서버: v2x-heartbeat.service 실행 중

클라: v2x-alert-client.service 실행 중, 언버퍼 모드 적용

방법 A) 이벤트 파일로 “단발 collision” 쏘기 (추천, 깔끔)

워처가 켜져 있어야 함.

서버에서 워처 켜기

sudo systemctl start v2x-watcher.service
systemctl status v2x-watcher.service


충돌 이벤트 1회 발생

python3 /opt/v2x/emit_event.py --type collision --severity high --distance-m 420 --clip-hint


기대 로그 (클라)

heartbeat: 10초마다

지금 방금 보낸 collision: 즉시 1~수회(브로드캐스터 설정에 따라)

[RECV] ... src=rsu_heartbeat type=heartbeat ...
[RECV] ... src=rsu_server_01 type=collision sev=high dist=420m suggest=slow_down ...
[RECV] ... src=rsu_heartbeat type=heartbeat ...


끝나면 그대로 둬도 되고, 워처를 잠시 멈추려면:

sudo systemctl stop v2x-watcher.service

방법 B) 충돌 지속 브로드캐스트(주기 섞기)

워처를 안 쓰고 직접 브로드캐스터를 띄우는 방식.

서버에서 (필요시) HMAC 키 셋팅

export V2X_KEY="mysecret"


충돌 반복 송신(1Hz = 초당 1회)

python3 /opt/v2x/server.py --repeat --hz 1 \
  --hmac-key "$V2X_KEY" \
  --type collision --severity high --distance-m 400 --suggest slow_down


기대 로그 (클라)

10초마다 heartbeat,

그 사이 사이에 collision이 주기적으로 섞여 들어옴.

우리가 넣은 “중복 억제 + 5초 레이트리밋” 때문에 collision 내용이 동일하면 5초 간격 정도로만 출력됨.

테스트 종료: 위 프로세스 Ctrl+C, 또는 실수로 살아 있으면

pkill -f "python3 .*server.py"

TTL/지연 주의 (드롭 방지)

클라에서 TTL 필터가 켜져 있음(ttl_s 기본 10s).

서버 시간과 클라 시간이 크게 어긋나면 age>ttl_s로 DROP 될 수 있어요.

NTP 동기화를 권장하거나, 테스트 중엔 서버 쪽에서 --ttl-s 30처럼 넉넉히 줘도 됩니다.

예:

python3 /opt/v2x/server.py --repeat --hz 1 --ttl-s 30 \
  --type collision --severity high --distance-m 400

확인/문제 해결 체크리스트

클라 로그에서 두 종류가 교대로 보이는지:

src=rsu_heartbeat type=heartbeat

src=rsu_server_01 type=collision

한쪽만 보이면:

서비스 상태:

systemctl status v2x-heartbeat.service v2x-watcher.service


MCAST/PORT 일치 (서버/클라 동일)

IFACE 지정 (서버/클라 모두 필요한 경우 IP 지정)

AP 멀티캐스트 설정 (IGMP 스누핑 영향)

원하면 이 상태에서 collision을 30초만 반복 송신 → 중지 → 다시 단발 이벤트 발사 같은 시나리오 스크립트(테스트 자동화)를 만들어줄게.
